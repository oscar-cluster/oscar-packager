#!/usr/bin/perl
#

use strict;
use Getopt::Long;
use OSCAR::Utils;
use OSCAR::ConfigFile;
use OSCAR::OCA::OS_Detect;
use File::Path;
use Carp;
use warnings "all";

my ($stable, $unstable, $verbose);

our $packaging_dir = "/tmp/oscar-packager";

Getopt::Long::Configure("pass_through");
GetOptions(
        "stable"                        => \$stable,
        "unstable"                      => \$unstable,
        "verbose"                       => \$verbose,
        "v"                             => \$verbose,
        "help"                          => \&help_and_exit,
        ) || help_and_die();

sub pkgdir_cleanup () {
    if (-d $packaging_dir) {
        print "Removing $packaging_dir\n" if $verbose;
        File::Path::rmtree ($packaging_dir);
    }
    if (-d $packaging_dir) {
        carp "ERROR: Impossible to remove $packaging_dir";
        return -1;
    }
    mkdir ($packaging_dir);
    return 0;
}

sub package_oscar ($) {
    my $config_file = shift;
    my @failed_comp;

    #
    # First we check what is the underlying packaging system (RPM vs. Deb)
    #
    my $os = OSCAR::OCA::OS_Detect::open();
    if (!defined $os) {
        die "ERROR: Impossible to detect the binary package format";
    }

    #
    # We clean-up the directory where we create the packages
    #
    pkgdir_cleanup ();

    #
    # We parse the config file.
    #
    print "Parsing $config_file...\n" if $verbose;
    my @cpts = OSCAR::ConfigFile::get_block_list ($config_file);
    OSCAR::Utils::print_array (@cpts) if $verbose;

    my $cmd;
    foreach my $c (@cpts) {
        my $source = OSCAR::ConfigFile::get_value ($config_file, $c, "source");
        my ($method, $url) = split (",", $source);
        if ($method eq "svn") {
            # We check out SVN
            $cmd = "cd $packaging_dir; svn co $url $c";
            print "Executing: $cmd\n" if $verbose;
            system $cmd;

            # We compile
            $cmd = "cd $packaging_dir/$c; ";
            my $build_cmd = OSCAR::ConfigFile::get_value ($config_file,
                                                          $c,
                                                          "precommand");
            if (defined ($build_cmd)) {
                $cmd .= "$build_cmd && ";
            }
            if ($os->{pkg} eq "deb") {
                $cmd .= "make deb";
            } elsif ($os->{pkg} eq "rpm") {
                $cmd .= "make rpm";
            } else {
                die "ERROR: Unknow binary package format ($os->{pkg})";
            }
            print "Executing: $cmd\n" if $verbose;
            if (system ($cmd)) {
                print "[INFO] Impossible to build $c ($cmd)\n" if $verbose;
                push (@failed_comp, $c);
            }
        } else {
            carp "ERROR: Unknow method to access source ($method)";
            return undef;
        }
    }

    print "\n\nGenerated binary packages are in $packaging_dir\n";

    return @failed_comp;
}

sub help () {
    print "Please execute the 'man oscar-packager' command\n";
}

sub help_and_die {
    help ();
    exit 1;
}

sub help_and_exit {
    help ();
    exit 0;
}

my $config_file_path = "/etc/oscar/oscar-packager";
my $config_file;
if ($stable) {
    $config_file = "$config_file_path/core_stable.cfg";
}

if ($unstable) {
    $config_file = "$config_file_path/core_unstable.cfg";
}

if (! -f $config_file) {
    die "ERROR: Impossible to find the configuration file ($config_file)";
}
my @failed_comp = package_oscar ($config_file);
if (scalar (@failed_comp) > 0) {
    print "Errors occured during the OSCAR packages.\n".
          "OSCAR components that failed are: ";
    OSCAR::Utils::print_array (@failed_comp);
}

exit 0;

__END__

=head1 NAME

oscar-packager, a script for the creation of binary packages (Debian or RPM
packages) for the OSCAR core.
The script is based on a configuration file ('/etc/oscar/oscar-packager/'),
which includes different configuration files for different OSCAR release (i.e.,
stable, unstable).

=head1 SYNOPSIS

oscar-packager OPTIONS

=head1 OPTIONS

Recognized options include:

=over 8

=item --stable

Package the latest OSCAR release.

=item --unstable

Package OSCAR unstable (i.e., the OSCAR SVN trunk).

=item --verbose|-v

Fall back to the verbose mode of execution for debugging purpose.

=back

=head1 AUTHOR

Geoffroy Vallee, Oak Ridge National Laboratory <valleegr at ornl dot gov>

=cut
