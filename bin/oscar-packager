#!/usr/bin/perl
#
# Copyright (c) 2008-2009 Oak Ridge National Laboratory
#                         Geoffroy Vallee <valleegr@ornl.gov>
#                         All rights reserved
#
# Copyright (c) 2013 Indiana University Bloomington
#                    DongInn Kim <dikim@cs.indiana.edu>
#                    All rights reserved
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# This script is a packager for OSCAR.
#
# $Id$
#

# 1st: Cleanup PATH from missleading links (e.g. /bin -> /usr/bin)
use strict;
use warnings "all";

my @paths = split(":", $ENV{PATH});
my @cleaned_path = ();
for my $p (@paths) {
    push (@cleaned_path, $p)
        if ( ! -l $p );
}
$ENV{PATH} = join(":", @cleaned_path);

# Now we can init everything.
use Getopt::Long;
use OSCAR::Env;
use OSCAR::Utils;
use OSCAR::FileUtils;
use OSCAR::ConfigFile;
use OSCAR::OCA::OS_Detect;
use OSCAR::Logger;
use OSCAR::LoggerDefs;
use OSCAR::Packager;
use File::Path;
use Carp;
use Cwd;

my ($all, $core, $included, $force, $opkgs, $debug, $verbose, $quiet, $available_releases, $unsigned);

$opkgs = 1;
use vars qw ($pkg_destdir);


# Getopt::Long::Configure("pass_through");
GetOptions(
        "all=s"                             => \$all,
        "core=s"                            => \$core,
        "included=s"                        => \$included,
        "force"                             => \$force,
        "ignore-nobuild"                    => \$OSCAR::Packager::force_nobuild,
        "supported-releases"                => \$available_releases,
        "unsigned-packages"                 => \$unsigned,
        "verbose"                           => \$verbose,
        "debug"                             => \$debug,
        "quiet"                             => \$quiet,
        "v"                                 => \$verbose,
        "help"                              => \&help_and_exit,
        ) || help_and_die();


# Global variables
our $packaging_dir = "/tmp/oscar-packager";
my $config_file_path = "/etc/oscar/oscar-packager";
my $built_pkgs = "$config_file_path/.oscar_pkgs";
my %already_built = ();

#my $initial_verbose = $ENV{OSCAR_VERBOSE};
# Now we correctly set OSCAR_VERBOSE to be sure we get all the output we want
if ($quiet) {
    $ENV{OSCAR_VERBOSE} = 0;
    $OSCAR::Env::oscar_verbose = 0;
    $verbose=0;
}
if ($verbose) {
    $ENV{OSCAR_VERBOSE} = 5;
    $OSCAR::Env::oscar_verbose = 5;
    $verbose=5;
}
if ($debug) {
    $ENV{OSCAR_VERBOSE} = 10;
    $OSCAR::Env::oscar_verbose = 10;
    $verbose=10;
}

sub pkgdir_cleanup () {
    # Avoid being in $packagin_dir before removing it.
    chdir('/tmp') or (oscar_log(5, ERROR, "Can't chdir to /tmp :$!"), return -1);
    if (-d $packaging_dir) {
        oscar_log(5, INFO, "Removing $packaging_dir");
        File::Path::rmtree ($packaging_dir);
    }
    if (-d $packaging_dir) {
        oscar_log(5, ERROR,"Failed to remove $packaging_dir");
        return -1;
    }
    mkdir ($packaging_dir);
    return 0;
}


sub get_pkg_dest () {
    #
    # First we check what is the underlying packaging system (RPM vs. Deb)
    #
    my $os = OSCAR::OCA::OS_Detect::open();
    if (!defined $os) {
        oscar_log(5, ERROR, "Failed to detect the binary package format");
        return "OS not detected";
    }

    #
    # We check that the destination directory for the packages is there, if not
    # we create it.
    #
    my $destdir = "/tftpboot/oscar/";
    $destdir .= "$os->{compat_distro}-$os->{compat_distrover}-$os->{arch}";
    if ( ! -d $destdir) {
        File::Path::mkpath ($destdir) 
            or (oscar_log(5, ERROR, "Failed to create $destdir"), return undef);
    }

    return $destdir;
}

# Read the .oscar_pkgs file and save the list of alredy built packages to 
# the global hash %already_built.
sub read_built_pkgs_file(){
    oscar_system("touch $built_pkgs") if( ! -e $built_pkgs);

    open PKGS, "<$built_pkgs";
    while(my $line = <PKGS>){
        chomp($line);
        my ($cat, $po, $pkg, $time) = split(":", $line, 4);
        $pkg = trim($pkg);
        $already_built{"$cat:$po:$pkg"} = $time;
    }
}

# Predicate to check to see if a package is already built or not
sub is_built($$){
    my ($pkg, $cat) = @_;
    return exists $already_built{"$cat:$pkg"};
}

# Update the /etc/oscar/oscar-packager/.oscar_pkgs status file
# according to build status.
sub set_built_status($$$) {
    my ($pkg, $cat, $status) = @_;

    my $timestamp = localtime;
    my $str = "$cat:$pkg";

    # 1st remove entry if any.
    oscar_system("sed -i '/$str/d' $built_pkgs");

    # Add updated entry if status = SUCCESS.
    if($status) {
        open PKG, ">>$built_pkgs";
        $str .= (" " x (50 - length($str)));
        print PKG "$str:$timestamp\n";
        close PKG;
    }
}

sub create_opkgs_metapkg ($) {
    my $cpts = shift;
    my @failed_comp;


#    oscar_log(1, SUBSECTION, "Creating OPKG meta-packages");

    $pkg_destdir = get_pkg_dest ();
    if (!defined $pkg_destdir) {
        oscar_log(5, ERROR, "Impossible to get the destination for packages");
        return "Unable to get the destination for packages";
    }

    my $os = OSCAR::OCA::OS_Detect::open();
    if (!defined $os) {
        oscar_log(5, ERROR, "Unable to detect the binary package format");
        # FIXME: should return an array of errors, not a string.
        return "OS not detected";
    }

    my $cmd;
    foreach my $c (keys %$cpts) {

        # oscar-packager takes opkgs, stable, unstable, and a package name as
        # a parameter of --all or --included.
        # OL: FIXME: we can optimize that moving out the loop some invariable stuffs.
        my ($current_opkg, $category) = split(":", $opkgs, 2);
        $category .= ":opkg";
        if( not ($current_opkg =~ m/current_opkg/ or $current_opkg =~ m/stable/) ){
           next if ($current_opkg ne $c);
        }
        # Check to see if the package is already built or not
        # If not, go ahead. Otherwise, move on to the next
        elsif(is_built($c, $category) and !$force){
            oscar_log(1, SUBSECTION, "[$category:$c] $os->{pkg}s are already built.");
            next;
        }

        oscar_log(1, INFO, "Building [$category:$c] OPKG $os->{pkg}s...");
        my $source = $$cpts{$c};
        my ($method, $url, $subpath) = split (",", $source);
        if ($method eq OSCAR::Defs::SVN()) {
            # We check out SVN
            $cmd = "cd $packaging_dir; svn co $url opkg-$c";
            $cmd .= " 1>/dev/null 2>/dev/null" if ($OSCAR::Env::oscar_verbose < 10);
            if (oscar_system $cmd) {
                oscar_log(1, ERROR, "Failed to build $c");
                set_failed (\@failed_comp, $c, $category);
                # Failed to retreive the source... next and avoid marking the package as built.
                next;
            }
        } elsif ($method eq OSCAR::Defs::GIT()) {
            # We do sparse checkout in GIT (need git >= 1.7 which is the case since CentOS-6)
	    # mkdir <repo>
	    # cd <repo>
	    # git init
	    # git remote add -f origin <url>
	    # git config core.sparseCheckout true
	    # echo "some/dir/" >> .git/info/sparse-checkout
	    # echo "another/sub/tree" >> .git/info/sparse-checkout
	    # git pull origin master
            $cmd = "mkdir $packaging_dir/opkg-$c; cd $packaging_dir/opkg-$c; git init; git remote add -f origin $url; git config core.sparseCheckout true; echo $subpath >> .git/info/sparse-checkout; git pull origin master";
            $cmd .= " 1>/dev/null 2>/dev/null" if ($OSCAR::Env::oscar_verbose < 10);
            if (oscar_system $cmd) {
                oscar_log(1, ERROR, "Failed to build $c");
                set_failed (\@failed_comp, $c, $category);
                # Failed to retreive the source... next and avoid marking the package as built.
                next;
            }
        } elsif ($method eq OSCAR::Defs::MERCURIAL()) {
            # We check out Mercural
            $cmd = "cd $packaging_dir; hg clone $url opkg-$c";
            $cmd .= " 1>/dev/null 2>/dev/null" if ($OSCAR::Env::oscar_verbose < 10);
            if (oscar_system $cmd) {
                oscar_log(1, ERROR, "Failed to build $c");
                set_failed (\@failed_comp, $c, $category);
                # Failed to retreive the source... next and avoid marking the package as built.
                next;
            }
        } else {
            oscar_log(1, ERROR, "Unknown method to access source ($method)");
            set_failed (\@failed_comp, $c, $category);
            # Don't know how to retreive the source. next and avoid marking the package as built.
            next;
        }

        # We compile
        require OSCAR::PackagePath;
        my $distro_id = OSCAR::PackagePath::get_distro ();
        if (!OSCAR::Utils::is_a_valid_string ($distro_id)) {
            set_failed (\@failed_comp, $c, $category);
            oscar_log(5, ERROR, "Unable to get the distro ID");
            next;
        }
        my $compat_id = OSCAR::PackagePath::get_compat_distro ($distro_id);
        if (!OSCAR::Utils::is_a_valid_string ($compat_id)) {
            set_failed (\@failed_comp, $c, $category);
            oscar_log(5, ERROR, "Unable to detect the compat distro ($distro_id)");
            next;
        }
        my ($compat_dist, @trash) = split ("-", $compat_id);
        $cmd = "cd $packaging_dir/opkg-$c$subpath;";
        $cmd .= "opkgc ";
        $cmd .= " -v" if ($OSCAR::Env::oscar_verbose >=  5);
        $cmd .= " -v" if ($OSCAR::Env::oscar_verbose >= 10);
        $cmd .= " --dist $compat_dist --output $pkg_destdir";
        $cmd .= " 1>/dev/null 2>/dev/null" if ($OSCAR::Env::oscar_verbose <= 1);
        OSCAR::Logger::oscar_log_subsection "Executing: $cmd";
        if (oscar_system ($cmd)) {
            oscar_log(1, ERROR, "Failed to build opkg-$c ($cmd)");
            set_failed (\@failed_comp, $c, $category);
            # Failed to build the package, go to next
            next;
        }

        # Here, we are in a SUCCESS situation. time to mark package as successfully built.
        set_built_status($c, $category, 1);
        oscar_log(1, INFO, "[$category:$c] $os->{pkg}s successfully built.");

        # once the opkg is built, remove its source tarball.
        oscar_system("rm -f $pkg_destdir/opkg-$c-*.tar.gz");
        # FIXME: The above command fails for opkg-oscarv-1.0.tar.gz and opkg-ssi-oscar-2.1.1.tar.gz
    }

    update_repo($pkg_destdir);
    #$cmd = "cd $pkg_destdir && /usr/bin/packman --prepare-repo $pkg_destdir";
    #$cmd .= " --verbose" if($OSCAR::Env::oscar_verbose >= 5);
    #$cmd .= " 1>/dev/null 2>/dev/null" if ($OSCAR::Env::oscar_verbose <= 1);
    #if (oscar_system($cmd)) {
    #    oscar_log(1, ERROR, "Failed to update repo: $pkg_destdir");
    #} else {
    #    oscar_log(1, INFO, "$pkg_destdir repo index has been updated");
    #}
    return @failed_comp
}

# Basic checks to see if everything is fine.
#
# Return: 0 if success, -1 else.
sub sanity_check () {

    oscar_log(4, INFO, "Sanity check...");
    # First we check the command is executed as root.
    if ($< != 0) {
        oscar_log(1, ERROR, "You must be 'root' to run this script.");
        return -1;
    }
    oscar_log(5, INFO, "Command executed as root");

    # We look for opkgc
    if (!-f "/usr/local/bin/opkgc" && !-f "/usr/bin/opkgc") {
        oscar_log(1, ERROR, "OPKGC is not installed");
        return -1;
    }
    oscar_log(5, INFO, "OPKGC available");

    # We look for packman
    if (!-f "/usr/bin/packman") {
        oscar_log(1, ERROR, "Packman is not available");
        return -1;
    }
    oscar_log(5, INFO, "Packman available");

    oscar_log(4, INFO, "Sanity check: ok");

    return 0;
}

# Push a package in upper failed_comp array
# displays error log
# TODO: Reenable build in /etc/oscar/oscar-packager/.oscar_pkgs
sub set_failed($$$) {
    my ($failed_comp_p, $package, $category) = @_;
    push(@$failed_comp_p, "$category:$package");
    oscar_log(1, ERROR, "[$category:$package] build failed.");
    set_built_status($package, $category, 0);
}

# Return: an array of errors (most of the time the OPKG for each the failure
#         occured.
sub create_package ($$) {
    my ($cpts, $precmds) = @_;
    my @failed_comp = ();

    #
    # We get the destination directory for the packages
    #
    $pkg_destdir = get_pkg_dest ();
    if (!defined $pkg_destdir) {
        # FIXME: should return an array of errors, not a string.
        return "Unable to get the destination for packages";
    }

    #
    # We clean-up the directory where we create the packages
    #
    pkgdir_cleanup();

    my $os = OSCAR::OCA::OS_Detect::open();
    if (!defined $os) {
        oscar_log(5, ERROR, "Unable to detect the binary package format");
        # FIXME: should return an array of errors, not a string.
        return "OS not detected";
    }

    my $cmd;
    my $file_type;
    my $filename;
    foreach my $c (keys %$cpts) {
        chdir "/tmp"; # Make sure we are in /tmp (pkgdir_cleanup set cwd to /tmp)

        # oscar-packager takes opkgs, stable, unstable, and a package name as
        # a parameter of --all or --included.
        my ($current_opkg, $category) = split(":", $opkgs, 2);
        $category .= ":package";
        if( not ($current_opkg =~ m/current_opkg/ or $current_opkg =~ m/stable/) ){
            next if ($current_opkg ne $c);
        }
        # Check to see if the package is already built or not
        # If not, go ahead. Otherwise, move on to the next
        elsif(is_built($c, $category) and !$force){
            oscar_log(1, SUBSECTION, "[$category:$c] is already built.");
            next;
        }

        oscar_log(1, SUBSECTION, "Building [$category:$c] $os->{pkg} package(s)");

        my $source = $$cpts{$c};
        my ($method, $url, $subpath) = split (",", $source);
        if ($method eq OSCAR::Defs::SVN()) {
            # We check out SVN
            $file_type = OSCAR::Defs::SVN();
            $cmd = "cd $packaging_dir; svn co $url $c";
            $cmd .= " 1>/dev/null 2>/dev/null" if ($OSCAR::Env::oscar_verbose <= 10);
            if (oscar_system $cmd) {
                oscar_log(1, ERROR, "Failed to retreived $c source. Can't build $c.");
                set_failed (\@failed_comp, $c, $category);
                # No source: stop here. Go to next package.
                next;
            }
        } elsif ($method eq OSCAR::Defs::GIT()) {
            # We check out GIT
            $file_type = OSCAR::Defs::GIT();
	    $cmd = "mkdir $packaging_dir/$c; cd $packaging_dir/$c; git init; git remote add -f origin $url; git config core.sparseCheckout true; echo $subpath >> .git/info/sparse-checkout; git pull origin master";
            $cmd .= " 1>/dev/null 2>/dev/null" if ($OSCAR::Env::oscar_verbose <= 10);
            if (oscar_system $cmd) {
                oscar_log(1, ERROR, "Failed to retreived $c source. Can't build $c.");
                set_failed (\@failed_comp, $c, $category);
                # No source: stop here. Go to next package.
                next;
            }
        } elsif ($method eq OSCAR::Defs::MERCURIAL()) {
            # We check out MERCURIAL
            $file_type = OSCAR::Defs::MERCURIAL();
            $cmd = "cd $packaging_dir; git clone $url $c";
            $cmd .= " 1>/dev/null 2>/dev/null" if ($OSCAR::Env::oscar_verbose <= 10);
            if (oscar_system $cmd) {
                oscar_log(1, ERROR, "Failed to retreived $c source. Can't build $c.");
                set_failed (\@failed_comp, $c, $category);
                # No source: stop here. Go to next package.
                next;
            }
        } elsif ($method eq "wget") {
            require OSCAR::Defs;
            my $dest = "$packaging_dir/$c";
            $filename = File::Basename::basename($url);
            if (!OSCAR::Utils::is_a_valid_string ($filename)) {
                oscar_log(1, ERROR, "unable to get file name ($filename) from url $url. Can't build $c.");
                set_failed (\@failed_comp, $c, $category);
                # No source: stop here. Go to next package.
                next;
            }
            if (OSCAR::FileUtils::download_file ($url, "$dest", "wget",
                OSCAR::Defs::OVERWRITE())) {
                oscar_log(1, ERROR, "Unable to download $url. Can't build $c.");
                set_failed (\@failed_comp, $c, $category);
                next;
            }
            $file_type = OSCAR::FileUtils::file_type ("$dest/$filename");
        } else {
            oscar_log(1, ERROR, "Unknown method to access source ($method)");
            set_failed (\@failed_comp, $c, $category);
            # Stop here: Don't know how to retreive the source.
            next;
        }

        # We check that we correctly detected the file type of the source we
        # got, this is mandatory to know what to do with it.
        if (!OSCAR::Utils::is_a_valid_string ($file_type)) {
            oscar_log(1, ERROR, "Unable to get the file type from $filename. Can't build $c.");
            set_failed (\@failed_comp, $c, $category);
            # Stop here: Don't know how to retreive the source.
            next;
        }

        oscar_log(5, INFO, "File type: $file_type");

        # We check the prereqs (including dependencies with other packages)
        # If build.cfg is present, the build is also triggered here.
        # -1 => build was attempted from within prereqs and there was a failure: => abort.
        # 0  => no build attempt was made from prepare_prereqs => we continue.
        # >0 => we had at least one build here: we're ok => next package.
        my $rc = OSCAR::Packager::prepare_prereqs ("$packaging_dir/$c$subpath", $pkg_destdir);
        if($rc == -1) {
            set_failed (\@failed_comp, $c, $category);
            # Stop here: failed to install dependancies and/or build package.
            next;
        } elsif($rc > 0) {
            oscar_log(1, INFO, "[$c] $os->{pkg}(s) successfully built.");
            set_built_status($c, $category, 1);
            # We update the repo, so the freshly built package can be sued as a depbuild in next one.
            # update_repo($pkg_destdir); # => Update occures when moving files to repo. More efficient.
            next;
        } # else $rc == 0, we still haven't attempted to build the package, so we continue.

        # We make sure we pre-process the downloaded files.
        if ($file_type eq OSCAR::Defs::TARBALL()) {
            # FIXME: OL: Possible enhancement:
            # try rpmbuild -ts. if success, use the resulting srpm as $filname and set filetype to SRPM().
            oscar_log(5, INFO, "Extracting $packaging_dir/$c/$filename into $packaging_dir/$c");
            if (extract_file("$packaging_dir/$c/$filename","$packaging_dir/$c")) {
                oscar_log(1, ERROR, "Failed to extract $filename. Can't build $c");
                set_failed (\@failed_comp, $c, $category);
                # Stop here: no extraction means no build.
                next;
            }
        }

        # We enter into the source tree of the package to build.
        chdir "$packaging_dir/$c$subpath";

        # We check if a precommand specified by the user needs to be executed
        my $precmd = $$precmds{$c};
        if (defined ($precmd)) {
            $precmd .= " 1>/dev/null 2>/dev/null" if ($OSCAR::Env::oscar_verbose < 10);
            if (oscar_system ($precmd)) {
                oscar_log(1, ERROR, "Failed to run pre-build command for $c");
                set_failed (\@failed_comp, $c, $category);
                # Precommand failed, package won't build.
                next;
            }
        }

        # Now we're ready to try to build the package.
        oscar_log(1, INFO, "Building packages for $c.");
        if ($os->{pkg} eq "deb") {
            if ($file_type eq OSCAR::Defs::SVN() ||
                $file_type eq OSCAR::Defs::GIT() ||
                $file_type eq OSCAR::Defs::MERCURIAL() ||
                $file_type eq OSCAR::Defs::TARBALL()) {
                if (-f "debian/changelog") {
                    $cmd = "dpkg-buildpackage -b -uc -us ;";
                } elsif (-f "Makefile") {
                    $cmd = "make deb UNSIGNED_OSCAR_PKG=1";
                } else {
                    oscar_log(1, WARNING, "No deb have been generated for package $c. (No build instructions)");
                    oscar_log(5, WARNING, " *** No build.cfg, no ./debian dir, no Makefile ***. Not yet supported?");
                    # No way to build package, we stop here.
                    # Do not set the package as failed, but also don't mark it as built. => next!
                    #set_failed (\@failed_comp, $c, $category);
                    next;
                }
                if (run_build_and_move($cmd,$pkg_destdir)) {
                    set_failed (\@failed_comp, $c, $category);
                    next;
                    # Package build failed, we stop here.
                } # else: SUCCESS.
             } else {
                oscar_log(5, ERROR, "Unhandeled type ($file_type) under debian");
                set_failed (\@failed_comp, $c, $category);
                # Don't know how to build this kind of file under debian.
                next;
            }
        } elsif ($os->{pkg} eq "rpm") {
            if ($file_type eq OSCAR::Defs::SVN() ||
                $file_type eq OSCAR::Defs::GIT() ||
                $file_type eq OSCAR::Defs::MERCURIAL() ||
                $file_type eq OSCAR::Defs::TARBALL()) {
                # 1st: do we have a spec file?
                my @spec_files = glob("*.spec");
                my $tarball;
                my $spec_file;
                if(scalar(@spec_files) == 0) { # maybe in the rpm dir?
                    @spec_files = glob("rpm/*.spec");
                }
                if(scalar(@spec_files) == 0) {
                    oscar_log(5, INFO, "No spec file found, trying next build method");
                } else {
                    $spec_file=$spec_files[0]; # Use the 1st one.
                    $tarball = build_tarball_from_dir_spec(".", $spec_file);
                }
                # If we come from a tarball, and there is a spec file in it, we have just recreated a tarball,
                # but at least, we are sure that the tarball name and top dir are correctly named and are
                # compatible with a rpmbuild -tb (tarbuild) command.
                if ( defined $tarball ) { # We got a tarball from a spec file Bingo!
                    $cmd = "rpmbuild -tb $tarball";
                    oscar_log(4, INFO, "Building $c rpm package from spec file.");
                    if (run_build_and_move($cmd,$pkg_destdir)) {
                        oscar_log(1, ERROR, "No rpms have been generated for package $c.");
                        set_failed (\@failed_comp, $c, $category);
                        next;
                        # Package build failed, we stop here.
                    } # else: SUCCESS.
                } elsif (-f "Makefile") { # no spec file? Then we try a Makefile....
                    $cmd = "make rpm";
                    oscar_log(4, INFO, "Building $c rpm package using Makefile.");
                    if(run_build_and_move($cmd,$pkg_destdir)) {
                        oscar_log(1, ERROR, "No rpms have been generated for package $c.");
                        set_failed (\@failed_comp, $c, $category);
                        next;
                        # Package build failed, we stop here.
                    } # else SUCCESS.
                } else { # No spec file, no makefile. => don't know how to build a rpm.
                    oscar_log(1, WARNING, "No rpms have been generated for package $c. (No build instructions)");
                    oscar_log(5, WARNING, " *** No build.cfg, no spec file, no Makefile ***. Not yet supported?");
                    # No way to build package, we stop here.
                    # Do not set the package as failed, but also don't mark it as built. => next!
                    #set_failed (\@failed_comp, $c, $category);
                    next;
                }
                # Here, we are in a SUCCESS situation.
            } elsif ($file_type eq OSCAR::Defs::SRPM()) {
                $cmd = "rpmbuild --rebuild $filename";
                if (run_build_and_move($cmd,$pkg_destdir)) {
                    oscar_log(1, ERROR, "No rpms have been generated for package $c.");
                    set_failed (\@failed_comp, $c, $category);
                    next;
                    # Package build failed, we stop here.
                } # else: SUCCESS.
            } else {
                oscar_log(1, ERROR, "ERROR: Unhandled source type ($file_type). Can't build $c.");
                set_failed (\@failed_comp, $c, $category);
                # Don't know how to build this kind of file under rpm based distro.
                next;
            }
        } else {
            oscar_log(1, ERROR, "Unknown binary package format ($os->{pkg}). Can't build $c.");
            set_failed (\@failed_comp, $c, $category);
            # Don't know how to build this kind of file under rpm based distro.
            next;
        }

        # Here, we are in a SUCCESS situation. time to mark package as successfully built.
        oscar_log(1, INFO, "[$category:$c] $os->{pkg}(s) successfully built.");
        set_built_status($c, $category, 1);

        # We update the repo, so the freshly built package can be sued as a depbuild in next one.
        # update_repo($pkg_destdir); # Update occures when package is moved to destdir.
    }
    return(@failed_comp);
}

sub help () {
    print "Please execute the 'man oscar-packager' command\n";
}

sub help_and_die {
    help ();
    exit 1;
}

sub help_and_exit {
    help ();
    exit 0;
}

sub parse_config($$){
    my ($config_file, $key) = @_;
    #
    # We parse the config file with the given key.
    #
    oscar_log(5, INFO, "Parsing $config_file...");
    my %cpts = OSCAR::ConfigFile::get_list_values ($config_file, $key);
    OSCAR::Utils::print_array (keys %cpts) if ($OSCAR::Env::oscar_verbose >= 10);

    return \%cpts;
}

sub do_packaging ($$) {
    my ($config_file, $opkg_conffile) = @_;
    my @failed_comp = ();
    my @main_failed_comp = ();
    my @meta_failed_comp = ();

    #
    # We do some basic testing
    #
    if (! -f $config_file) {
        oscar_log(5, ERROR, "Config file $config_file does not exist");
        return "ERROR: Impossible to access $config_file";
    }

    # Get the list of packages by parsing the package config file with "source"
    my $cpts =  parse_config($config_file, "source");

    # Get the list of packages by parsing the package config file with "precommand"
    my $precmds =  parse_config($config_file, "precommand");

    # Get the list of opkgs by parsing the package config file with "source"
    my $ocpts =  parse_config($opkg_conffile, "source");

    @main_failed_comp = create_package ($cpts, $precmds);
#    if (scalar (@main_failed_comp) > 0) {
#        oscar_log(1, SUBSECTION, "Errors occured during the creation of OSCAR packages.");
#        oscar_log(1, ERROR, "Package that fail to build are: \n - " . join ("\n - ", @main_failed_comp));
#    }

    # We now create the meta-package for all core OPKGs.
    if (-f $opkg_conffile) {
        @meta_failed_comp = create_opkgs_metapkg ($ocpts);
#        if (scalar (@meta_failed_comp) > 0) {
#            @meta_failed_comp = map {"opkg-" . $_} @meta_failed_comp;
#            oscar_log(1, SUBSECTION, "Errors occured during the creation of OSCAR meta-packages");
#            oscar_log(5, ERROR, "Package that fail to build are: \n - " . join("\n - ", @meta_failed_comp));
#        }
    } else {
        oscar_log(1, INFO, "No configuration for OPKGs found, skipping that step ".
            "($opkg_conffile)");
    }

    # Build failed comp sumup.
    @failed_comp = ( @main_failed_comp , @meta_failed_comp );
#    if (scalar (@failed_comp) > 0) {
#            oscar_log(1, SECTION, "Errors occured during the creation of packages");
#            oscar_log(1, ERROR, "Failed builds are:\n - " . join("\n - ", @failed_comp));
#    }
    return @failed_comp;
}

# Generic routine to package $type=(core,included,...)
# package_type:
# version: either a version, or unstable or a package name
# releases: table with supported releases
# conffilepath: /etc/oscar/oscar-packager
# type: possible values: core, included

sub package_type($$$$) {
    my ($version, $releases, $conffilepath,$type) = @_;
    my ($config_file, $opkg_conffile);
    my @failed_comp = ();
    my $conf_file_ext="";

    if (!defined $version) {
        return @failed_comp;
        # FIXEME: We should return something non empty otherwise, ther will be no error
        # reported. (this case should never happen).
    }
    $opkgs = "$version:$type";

    if (!OSCAR::Utils::is_element_in_array($version, @$releases)) {
        $version="unstable";
    } else {
        $conf_file_ext="_stable";
    }
    $config_file = "$conffilepath/$type".$conf_file_ext."_".$version.".cfg";
    $opkg_conffile = "$conffilepath/$type"."_opkgs_".$version.".cfg";
    oscar_log(1, SECTION, "Packaging OSCAR $type ($version)");

    @failed_comp = do_packaging ($config_file, $opkg_conffile);

#    @failed_comp = map { "$type: " . $_ } @failed_comp;
    return @failed_comp;
}

my $config_file; # This variable points to the config file for the components
                 # we try to package.
my $opkg_conffile; # This variable points to the associated OPKGs.

$ENV{UNSIGNED_OSCAR_PKG} =1 if ($unsigned);

# We create a log file specific to oscar-packager
my $log_file = "/var/log/oscar/oscar-packager.log";
OSCAR::Logger::init_log_file ($log_file);

if (sanity_check ()) {
    oscar_log(1, ERROR, "System configuration not compliant with oscar-packager.");
    exit 1;
}

my @releases = OSCAR::Packager::available_releases();

#
# Special case: the user just want the list of available releases for which we
# can package OSCAR
#
if ($available_releases) {
    (oscar_log(1, ERROR, "Unable to get the list of supported releases"), exit 1)
        if (scalar (@releases) == 0);
    oscar_log(1, INFO, "Packaging capability available for the following OSCAR releases:");
    OSCAR::Utils::print_array (@releases);
    exit (0)
}

# Read the .oscar_pkg file (packages that are already built)
read_built_pkgs_file();

oscar_log(1, SECTION, "OSCAR Packager Starting...");

if ( ! defined $all &&
     ! defined $core &&
     ! defined $included) {
    oscar_log(1, ERROR, "Missing --all or --core or --included option");
    help_and_die();
}

# $all, $core, $included contain the version to package
# ???? or the name of the package to build ???.
if ($all) {
    $core = $all;
    $included = $all;
}

my @core_failed_comp = package_type ($core, \@releases, $config_file_path, "core");
my @included_failed_comp = package_type ($included, \@releases, $config_file_path, "included");

oscar_log(1, SECTION, "OSCAR Packager compilation results:");
my @all_failed_comp = ( @core_failed_comp , @included_failed_comp );

my $exit_code=0;

if (scalar (@all_failed_comp) > 0) {
    oscar_log(1, WARNING, "Packaging was not 100% successfull.");
    oscar_log(1, ERROR, "Packages that fails to build are:\n - ".
       join("\n - ", @all_failed_comp));
    $exit_code=1;
} else {
    oscar_log(1, INFO, "Packaging was 100% successfull!");
}

# Before to exit, we restore the initial OSCAR_VERBOSE value
#if (defined $initial_verbose) {
#    $ENV{OSCAR_VERBOSE} = $initial_verbose;
#}

oscar_log(1, SECTION, "OSCAR Packager Ending");

exit $exit_code;

__END__

=head1 NAME

oscar-packager, a script for the creation of binary packages (Debian or RPM
packages) for the OSCAR core.
The script is based on a configuration file ('/etc/oscar/oscar-packager/'),
which includes different configuration files for different OSCAR release (i.e.,
stable, unstable).

=head1 SYNOPSIS

oscar-packager OPTIONS

=head1 OPTIONS

Recognized options include:

=over 8

=item --all [VERSION]

Package a given release of OSCAR, both core and included OPKGs. To package the development version, use "unstable" as VERSION.

=item --core [VERSION]

Package a given release of the OSCAR core. To package the development version, use "unstable" as VERSION.

=item --included [VERSION]

Package a given release of the OSCAR included OPKGs. To package the development version, use "unstable" as VERSION.

=item --force

Force build of package that are already tagged as built.

=item --ignore-nobuild

Ignore the nobuild: tag in build.cfg and tries to build the package anyway.

=item --supported-releases

Give the list of OSCAR releases that can be packaged.

=item --unsigned-packages

Do not sign the binary packages that will be created (currently only for Debian systems).

=item --verbose|-v

Fall back to the verbose mode of execution for debugging purpose.

=item --debug

Display even more output than when using the verbose option.

=back

=head1 EXAMPLES

=over 8

=item oscar-packager --all stable_6.1.2
Build all the packages and opkgs in the stable_6.1.2 category. If the packages have already been built, they would not be re-built unless the "--force" option is applied.

=item oscar-packager --all modules-oscar
Build only the package with the name "modules-oscar". This is the same as "oscar-packager --all modules-oscar --force".
Since specifying a package name means that you really want to build that one, it does not matter whether it has --force option or not.

=item oscar-packager --included unstable --force
Build all the included packages and opkgs in the unstable category no matther whether they have already been built or not.

=back

=head1 AUTHORS

Geoffroy Vallee, Oak Ridge National Laboratory <valleegr at ornl dot gov>
Olivier Lahaye, Commissariat a l'Energie Atomique et aux Energies Alternatives <olivier dot lahaye at cea dot fr>

=cut
