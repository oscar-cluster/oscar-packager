#!/usr/bin/perl
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# $Id$
#
# (C)opyright Erich Focht <efocht@hpce.nec.com>
#             All rights reserved
# Copyright (c) 2009 Oak Ridge National Laboratory
#                    Geoffroy Vallee <valleegr@ornl.gov>
#                    All rights reserved



use strict;
use Cwd;
use File::Basename;
use Data::Dumper;
use Getopt::Long;
use OSCAR::OCA::OS_Detect;
use OSCAR::PackagePath;
use OSCAR::Packager;
use Carp;

my ($OHOME, $os, $verbose, $test, @installed_reqs);


# GV: this is a good idea but since we want to support both RPM and Debian
# based systems, we will have to update it so for now, we deactivate it.
# # This script does not work without yum and yume, and a reasonably set up
# # distro repository.
# if (system("which yum >/dev/null 2>&1")) {
#     print "Could not locate \"yum\". This utility does not work without it!\n";
#     exit 1;
# }
# if (system("which yume >/dev/null 2>&1")) {
#     print "Could not locate \"yume\". This utility does not work without it!\n";
#     exit 1;
# }

GetOptions(
            "verbose|v"   => \$verbose,
            "test|t"      => \$test,
           );

# all other arguments are interpreted as OSCAR package or prereq names
my @pkgs = @ARGV;

# detect own distro with OS_Detect
my $os = OSCAR::OCA::OS_Detect::open();
if (!defined $os) {
    die "ERROR: Impossible to detect the binary package format";
}

my $pool = OSCAR::PackagePath::distro_repo_url();


my $bindir = "distro/".$os->{compat_distro}.$os->{compat_distrover}.
    "-".$os->{arch};
my $arch = $os->{arch};
my $march = $arch;
$march =~ s/^i.86$/i?86/;
my $build_arch = $arch;
$build_arch =~ s/^i.86$/i686/;

my $err;
for my $pkg (@pkgs) {
    OSCAR::Packager::package_opkg ($pkg);
}

exit 0;

########################################################################




sub remove_installed_reqs {
    if (@installed_reqs) {
	my @pre_pkgs;
	for (@installed_reqs) {
	    if (!/\.rpm$/) {
		push @pre_pkgs,$_;
	    } else {
		my $name = `rpm -q --qf '%{NAME}-%{VERSION}-%{RELEASE}' -p $_`;
		push @pre_pkgs, $name;
	    }
	}
	print "Removing requires: ".join(" ",@pre_pkgs)."\n";
	if (!$test) {
	    !system("yume -y remove ".join(" ",@pre_pkgs));
	}
	@installed_reqs = ();
    }	    
}


#
# Extend configuration hash by info on srpms: add srpm path, name and version
#
sub srpm_name_ver {
    my ($pdir,$conf) = @_;

    my %c = %{$conf};

    # @names are actually glob patterns
    for my $g (keys(%c)) {
	my $add;
	if ($g !~ m/\-\d/) {
	    $add = "-[0-9]";
	}
	if ($verbose) {
	    print "srpm glob: $pdir/SRPMS/$g$add*\n";
	}
	my @SRPM = glob("$pdir/SRPMS/$g$add*");
	if (scalar(@SRPM) == 0) {
	    die "Pattern $g matched no srpm! Edit your build.cfg file!";
	} elsif(scalar(@SRPM) > 1) {
	    croak("Pattern $g matched more than one srpm! Edit your build.cfg file!");
	}
	my $srpm = $SRPM[0];
	my ($name,$ver) = 
        split(" ",`rpm -q --qf '%{NAME} %{VERSION}-%{RELEASE}' -p $srpm`);

	$conf->{"$g"}{srpm} = $srpm;
	$conf->{"$g"}{name} = $name;
	$conf->{"$g"}{ver}  = $ver;
    }
}




__END__

=head1 DESCRIPTION

Based on a distro-aware configuration file this tool builds RPMs for OSCAR
packages and prerequisites and stores them into the generic-setup compliant
location (either distro/common-rpms/ or distro/$distro$version-$arch/)

The configuration file allows the specification of build requirements, they
will be installed with yume and removed after the package build.

You will need to install yume manually and configure the default distro package
pool manually (yume --repo /tftpboot/distro/$distro-$version-$arch --prepare)
in order to be able to install requirements and dependencies.

You will need to copy the build_rpms tool into the scripts/ directory
before using this tool. It is used for building RPMs out of the SRPMs.

=head1 CONFIGURATION

This tool requires a configuration file called build.cfg to be located
in the SRPMS directory of the package. It's format is somewhat similar to
the prereq.cfg file:


[distro:version:architecture]

# install pkg1 belonging to opkg before building
requires: opkg:pkg1
common: srpm_name [additional_rpmbuild_options]
env: SGE_ROOT=/opt/sge
srpm_name 
...

[distro2:version:architecture]
...

The distro name, version or arch info can contain a "*". This matches
like a .* regexp. The distro names are the "compat" names!!!
Examples:
[rh*:3:*]     matches all rhel3 architectures.
[fc:*:*]      matches all fedora core distros on all architectures
[md*:*:*]     matches both mdk and mdv
[*:*:*]       matches everything.


A configuration block can contain multiple "requires:" lines. This gives
us a chance to use build requires from inside the same opkg. The config
file will be executed in pieces split by the "requires:" lines.
For example: the ganglia package requires rrdtool-devel for building,
a package included into the ganglia opkg. Therefore the ganglia rpms will
be built with the following configuration file:

[*:*:*]
requires: php-devel
rrdtool-1.0.49-2.rf.src.rpm
requires: ganglia:rrdtool*
ganglia-3
env: MYENV_VAR=/blah
common: ganglia-web-3

This translates to following steps:

=over 4

=item - install php-devel requirement

=item - build packages resulting from the rrdtool srpm and copy them into   distro/$distro$ver-$arch/

=item - install all rpms starting with rrdtool belonging to the ganglia opkg

=item - build rpms out of the srpm matching the string ganglia-3* and install them into the directory distro/$distro$ver-$arch/

=item - set the environment variables specified on the env: line

=item - build the common rpms resulting from the srpm matching "ganglia-web-3*" and install them into the distro/common-rpms/ directory.

=item - after the block was executed, attempt to remove the requires which were
  installed 

=back

=head1 AUTHORS

Erich Focht

=cut
